---
import { Code } from 'astro-expressive-code/components';
import StyleSwitcher from './StyleSwitcher.astro';
import { CodeSandboxButtonComponent } from '../code-editor/code-button.component';

type Tab = {
    label: string;
    content: string;
};

type Props = {
    tabs: Tab[];
    activeTab: number;
    code: string;
    name: string;
    css: string;
};

const { tabs, activeTab, code, css, name } = Astro.props as Props;
---

<div class="border-muted flex w-full items-center justify-between">
    <div role="tablist" aria-orientation="horizontal" tabindex="0" class="flex">
        {
            tabs.map((tab, index) => (
                <button
                    role="tab"
                    type="button"
                    tabindex="-1"
                    class={`tab cursor-default border-b-2 px-4 py-2 text-sm transition-colors ${
                        activeTab === index
                            ? 'border-blue-500 font-bold'
                            : 'border-transparent text-gray-600 dark:text-slate-300'
                    }`}
                    data-index={index}
                >
                    {tab.label}
                </button>
            ))
        }
    </div>
    <div class="ml-auto flex items-center gap-4">
        <CodeSandboxButtonComponent {...{ code, name, css }} client:visible />
        <StyleSwitcher />
    </div>
</div>

{
    tabs.map((tab, index) => (
        <div id="Code" class={`tab-content ${activeTab === index ? 'block' : 'hidden'}`}>
            <div class="code-block relative max-h-24 overflow-hidden" data-index={index}>
                <Code code={tab.content} lang="angular-ts" />
                <div class="pointer-events-none absolute bottom-0 left-0 right-0 h-10 bg-gradient-to-t from-white dark:from-black" />
                <button
                    data-accent-color="gray"
                    class="rt-reset rt-BaseButton rt-r-size-1 rt-variant-soft rt-high-contrast rt-Button toggle-code-btn absolute bottom-0 left-1/2 -translate-x-1/2 transform dark:bg-slate-700"
                    data-index={index}
                    aria-expanded="false"
                >
                    Expand Code
                </button>
            </div>
        </div>
    ))
}

<script>
    document.querySelectorAll('.toggle-code-btn').forEach((button) => {
        button.addEventListener('click', () => {
            const index = parseInt(button.getAttribute('data-index'));

            const codeBlock = document.querySelector(`.code-block[data-index="${index}"]`);

            if (button.getAttribute('aria-expanded') === 'false') {
                codeBlock.classList.remove('max-h-24');
                codeBlock.classList.add('max-h-full');
                button.textContent = 'Collapse Code';
                button.classList.add('bottom-4');
                button.setAttribute('aria-expanded', 'true');
            } else {
                codeBlock.classList.remove('max-h-full');
                codeBlock.classList.add('max-h-24');
                button.textContent = 'Expand Code';
                button.setAttribute('aria-expanded', 'false');
                button.classList.add('bottom-0');
            }
        });
    });

    document.querySelectorAll('.tab').forEach((tabElement) => {
        tabElement.addEventListener('click', () => {
            const index = parseInt(tabElement.getAttribute('data-index') as string);

            // Toggle visibility of tab content
            document.querySelectorAll('.tab-content').forEach((content, contentIndex) => {
                if (content instanceof HTMLElement) {
                    content.style.display = contentIndex === index ? 'block' : 'none';
                }
            });

            // Toggle active tab classes
            document.querySelectorAll('.tab').forEach((tab, tabIndex) => {
                if (tab instanceof HTMLElement) {
                    if (tabIndex === index) {
                        tab.classList.remove('border-transparent', 'text-gray-600');
                        tab.classList.add('border-blue-500', 'font-bold');
                    } else {
                        tab.classList.remove('border-blue-500', 'font-bold');
                        tab.classList.add('border-transparent', 'text-gray-600');
                    }
                }
            });
        });
    });
</script>

<style>
    .max-h-24 {
        max-height: 10rem;
    }

    .max-h-full {
        max-height: none;
    }

    .gradient-overlay {
        background: linear-gradient(0deg, white, transparent);
    }
</style>
